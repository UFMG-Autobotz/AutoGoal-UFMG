#!/bin/bash

# prepare to print colorful text
red='\e[0;31m'
nc='\033[0m'

# print error messages
function err() {
  echo -e "${red}$@${nc}" # on red on stdout
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2 # with timestamp on stderr
}

# run gazebo
function run_gazebo() {
  cd Autobotz-Simulator/Bash/ # go to the right directory
  . Setup/VSS_setup.sh # run vss setup

  file="Worlds/VSS_${2}.world" # append correct sintaxe

  if [[ "${1}" == "true" ]] ; then
    gzserver $file
  else
    gazebo $file --verbose
  fi
}

# run viewer
function run_viewer {
  cd Visao/ # go to the right directory

  if [ "${1}" == "true" ] ; then
    python Vision.py
  fi
}

# run control
function run_control {
  cd "Autobotz-Simulator/Modules/" # go to the right directory

  if [ "${1}" == "keyboard" ] ; then
    cd Keyboard_Command
    topic="VSS_${2}.yaml"
    python main.py $topic
  fi
}

# run script
function run() {
  # READ WORLD
  export world=$1

  # check for errors while reading world
  if [ ! $world ] || [ "$world" == "-q" ] || [  "$world" == "-v" ]  || [  "$world" == "-c" ] ; then
    err "Please choose a world to open."
    exit 1
  fi

  # READ OPTIONS
  # default options values
  export quiet=false
  export viewer=false
  export control=keyboard

  # parse options
  OPTIND=2
  while getopts q:v:c: option; do
    case "${option}" in
      q) quiet=${OPTARG};;
      v) viewer=${OPTARG};set_viewer=true;;
      c) control=${OPTARG};;
    esac
  done

  # if quiet, viewer default become ture
  if [ $quiet ] && [ ! $set_viewer ] ; then
    viewer=true
  fi

  echo quiet = $quiet
  echo viewer = $viewer
  echo control = $control

  export -f run_gazebo
  export -f run_viewer
  export -f run_control

  options=()

  cmds[1]="roscore"
  cmds[2]="run_gazebo $quiet $world"
  cmds[3]="run_viewer $viewer"
  cmds[4]="run_control $control $world"

  for i in {1..4}; do
  options+=(--tab -e "bash -c '${cmds[i]} ; bash'" )
  done

  gnome-terminal --disable-factory "${options[@]}"

  # run_gazebo $world $quiet
  # gnome-terminal --disable-factory --tab -e roscore  --tab -x bash -c 'run_control $control $world; bash' --tab -x bash -c 'run_control $control $world; bash'
  #  --tab -x bash -c 'run_viewer $viewer; bash'
#--tab -x bash -c 'run_gazebo $quiet $world; bash'
}

run $@ 2>> Script/error.log # append error messages to log
