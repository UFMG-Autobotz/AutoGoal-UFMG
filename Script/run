#!/bin/bash

# prepare to print colorful text
export red='\e[0;31m'
export nc='\033[0m'

# save the root of the git repository (used to save erros on the log)
export git_root=$(pwd)

# print error messages
function err() {
  echo -e "${red}$@${nc}" # on red on stdout
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >> "${git_root}/Script/error.log"  # with timestamp on stderr
}

# run gazebo
function run_gazebo() {
  cd Autobotz-Simulator/Bash/ # go to the right directory
  . Setup/VSS_setup.sh # run vss setup

  file="Worlds/VSS_${2}.world" # append correct sintaxe

  if [[ "${1}" == "true" ]] ; then
    gzserver $file
  else
    gazebo $file --verbose
  fi
}

# run viewer
function run_viewer {
  cd "Autobotz-Simulator/Modules/GUI" # go to the right directory

  if [ "${1}" == "true" ] ; then
    python Image.py
  else
    echo "Viewer not enabled."
  fi
}

# run control
function run_control {
  cd "Autobotz-Simulator/Modules/" # go to the right directory

  if [[ "${1}" == "keyboard" ]] ; then
    cd Keyboard_Command
    topic="VSS_${2}.yaml"
    python main.py $topic
  elif [[ "${1}" == "joystick" ]] ; then
    echo "Joystick not implemented yet."
  elif [[ "${1}" == "none" ]] || [[ "${1}" == "false" ]] ; then
    echo "Controller not enabled."
  else
    err "Controller not recognised."
  fi
}

# run strategy
function run_strategy {
  cd "Estrategia/" # go to the right directory

  if [[ "${1}" == "penalty" ]] ; then
    python main.py
  else
    echo "No strategy implemented for this world."
  fi
}

# run script
function run() {
  # READ WORLD
  export world=$1

  # check for errors while reading world
  if [ ! $world ] || [ "$world" == "-q" ] || [  "$world" == "-v" ]  || [  "$world" == "-c" ] ; then
    err "Please choose a world to open."
    exit 1
  fi

  # READ OPTIONS
  # default options values
  export quiet=false
  export viewer=false
  export control=keyboard
  set_viewer=false

  # parse options
  OPTIND=2
  while getopts q:v:c: option; do
    case "${option}" in
      q) quiet=${OPTARG};;
      v) viewer=${OPTARG};set_viewer=true;;
      c) control=${OPTARG};;
    esac
  done

  # if quiet, viewer default become ture
  if [[ "$quiet" == "true" ]] && [[ "$set_viewer" == "false" ]] ; then
    viewer=true
  fi

  # display configuration
  echo -e "You are running AutoGoal-UFMG with the following configuration:"
  echo -e "\t - world: $world"
  echo -e "\t - quiet: $quiet"
  echo -e "\t - viewer: $viewer"
  echo -e "\t - control: $control"
  echo -e "\nPress Ctrl-C to quit."

  export -f run_gazebo
  export -f run_viewer
  export -f run_control
  export -f run_strategy
  export -f err

  options=()

  cmds[0]="roscore"
  cmds[1]="run_gazebo $quiet $world"
  cmds[2]="run_viewer $viewer"
  cmds[3]="run_control $control $world"
  cmds[4]="run_strategy $world"

  for i in {0..4}; do
    options+=(--tab -e "bash -c '${cmds[i]}; bash'" )
  done

  gnome-terminal --disable-factory "${options[@]}"

}

run $@
