#!/bin/bash

# ============ #

# prepare to print colorful text
export red='\e[0;31m'
export nc='\033[0m'

# save the root of the git repository (used to save erros on the log)
export git_root=$(pwd)

# ============ #

# function to print error messages
# messages are displayed on the terminal on red
# and saved on error.log with timestamp
function err() {
  echo -e "${red}$@${nc}" # on red on stdout
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >> "${git_root}/script/error.log"  # with timestamp on stderr
}

# ============ #

# function to quit if a value is not in an allowance list
# $1=allowed_values $2=allowance_list $3=error_message
function check_value {
  local -n allowed_values=$1
  valid=$(printf "%s\n" "${allowed_values[@]}" | grep -x "${2}" | wc -l)

  if [[ "$valid" == "0" ]] ; then
    err "${3}"
    exit 1
  fi
}

# ============ #

# function to run gazebo
# $1 = $quiet $2 = $world
function run_gazebo {
  cd Autobotz-Simulator/ # go to the right directory
  file="02_Worlds/VSS_${2}.world" # append correct sintaxe

  if [[ "${1}" == "true" ]] ; then
    quiet_option="-q"
  fi

  script/run VSS ${2,,} $quiet_option
}

# ============ #

# function to run viewer
# $1 = $viewer
function run_viewer {
  cd "Autobotz-Simulator/modules/GUI" # go to the right directory

  if [ "${1}" == "true" ] ; then
    python Image.py
  else
    echo "Viewer not enabled."
  fi
}

# ============ #

# function to run control
# $1 = $control $2 = $world
function run_control {
  cd "Autobotz-Simulator/modules/" # go to the right directory

  if [[ "${1}" == "keyboard" ]] ; then
    cd Keyboard_Command
    topic="VSS_${2}.yaml"
    python main.py $topic
  elif [[ "${1}" == "joystick" ]] ; then
    echo "Joystick not implemented yet."
  elif [[ "${1}" == "none" ]] || [[ "${1}" == "false" ]] ; then
    echo "Controller not enabled."
  fi
}

# ============ #

# function to run strategy
# $1 = $world
function run_strategy {
  cd "Estrategia/" # go to the right directory

  if [[ "${1}" == "penalty" ]] ; then
    python main.py
  else
    echo "No strategy implemented for this world."
  fi
}

# ============ #

# READ WORLD
export world=$1

# ------------ #

# check for errors while reading world
if [[ ! $world ]] || [[ "$world" == "-q" ]] || [[  "$world" == "-v" ]]  || [[  "$world" == "-c" ]] ; then
  err "Please choose a world to open."
  exit 1
fi

# ------------ #

# check for help
if [[ "$world" == "--help" ]]  || [[ "$world" == "-h" ]]; then
  echo -e "Script/run - runs demonstration simulations with a single command\n"
  echo -e "SINTAXE: Script/run world [options]"
  echo -e "Worlds implemented: penalty and 1on1\n"
  echo -e "Options:"
  echo -e "\t -q: quiet - boolean, default is false"
  echo -e "\t -v: viewer - boolean, default is false when not quiet and true when quiet"
  echo -e "\t -c: control - keyboard or none, default is keyboard"

  exit 0
fi

# ------------ #

# READ OPTIONS
# default options values
export quiet=false
export viewer=false
export control=keyboard
set_viewer=false

# parse options
OPTIND=2
while getopts q:v:c: option; do
  case "${option}" in
    q) quiet=${OPTARG,,};;
    v) viewer=${OPTARG,,};set_viewer=true;;
    c) control=${OPTARG,,};;
  esac
done

# if quiet, viewer default become true
if [[ "$quiet" == "true" ]] && [[ "$set_viewer" == "false" ]] ; then
  viewer=true
fi

# ------------ #

# validate entries before running (quit if something is wrong)
# validate Worlds
valid_worlds=(1on1 penalty)
check_value valid_worlds $world "World not found: $world!"

# validate Quiet
valid_quiet=(true false)
check_value valid_quiet $quiet "Incorrect value for quiet option: $quiet!"

# validate viewer
valid_viewer=(true false)
check_value valid_viewer $viewer "Incorrect value for viewer option: $viewer!"

# validate Control
valid_control=(keyboard false none joystick)
check_value valid_control $control "Invalid controller: $control!"

# ------------ #

# display configuration
echo -e "You are running AutoGoal-UFMG with the following configuration:"
echo -e "\t - world: $world"
echo -e "\t - quiet: $quiet"
echo -e "\t - viewer: $viewer"
echo -e "\t - control: $control"
echo -e "\nPress Ctrl-C to quit."

# ------------ #

# export functions to run them on child processes
export -f run_gazebo
export -f run_viewer
export -f run_control
export -f run_strategy

# run functions on gnome terminal tabs
cmds[0]="roscore"
cmds[1]="run_gazebo $quiet $world"
cmds[2]="run_viewer $viewer"
cmds[3]="run_control $control $world"
cmds[4]="run_strategy $world"

tabs=()
for i in {0..4}; do
  tabs+=(--tab -e "bash -c '${cmds[i]}; bash'" )
done

gnome-terminal --disable-factory "${tabs[@]}"
