 /******    Minitutorial github    ******/

git clone <url>  --> baixa um pacote pro seu diretorio

//entre na pasta clonada e vai estar tudo la, pra voce modificar da forma que preferir
//depois de modificar os arquivos da forma desejada voce deve avisar o git que voce quer que essa mudança seja contabilizada por ele
//digite o seguinte comando (dentro da pasta clonada)

git status

//isso vai mostrar todas as modificações feitas e arquivos nao rastreados
//quando quiser que uma modificação seja contabilizada, digite:

git add <nomedoarquivo>

//depois de 'git status' denovo pra ver se o arquvo foi adicionado (ele muda de vermelho pra verde)
//isso que voce fez foi passar o arquivo pro estado 'staged' ou algo do tipo 'pronto pra enviar'
//se esqueceu de mudar ou salvar alguma, é só repitir o processo

// depois que tiver feito isso, voce deve dar o comando:

git commit -m 'texto'

//no lugar de texto voce escreve uma breve ddescriçãod o que foi modificado 
//(isso é muito importante pra que outros usuarios saibam o que esta acontecendo)

//feito isso voce pode enviar as modificações pro servidor (só o que foi alterado, adicionado e acometido vai ser enviado)
//pra isso digite:

git push <url> <branch>


//url do servidor pode ser substiuido por 'origin' (vai enviar pra origem do pacote) 
//e branch é o nome do ramo que voce editou (geralmente master) pronto!!

git push origin master

//a partir de agora voce nao precisa mais dar clone todas as vezes, basta usar o comando fetch

git pull [remote-name]

//de forma similar, voce pode substituir a url do servidor por 'origin' pra que ele puxe denovo da origem do clone

git pull origin


//ppra ver uma lista dos push's de outros usuarios, use o comando

git log

//ou de forma mais compacta
git log --pretty="%h - %ad by %an - %s" --date=relative
(Q pra sair)

//ou ainda um formato com grafico de branching

git log --pretty=format:"%h - %ad %an -> %s" --date=relative
// eu uso essa configuração:
git log --graph --pretty=format:'%Cred%h%Creset %C(bold blue)<%an>%Creset - %C(yellow)%d%Creset %s %Cgreen(%cr) %n ' --abbrev-commit --date=relative -n 10
// que mostra os branchs em um grafico, e é tudo colorido, fica mais facil de ver... pra nao ter que digitar isso tudo sempre, é só adicionar no seu arquivo .bashrc um atalho, pra isso basta adicionar a seguinte linha no final do arquivo
alias log="git log --graph --pretty=format:'%Cred%h%Creset %C(bold blue)<%an>%Creset - %C(yellow)%d%Creset %s %Cgreen(%cr) %n ' --abbrev-commit --date=relative -n 10"
//digite 'log' no terminal :)


//----------------------branching----------------------
//branching é simples, voce cria uma outra linha de modificações que não altera a linha principal do programa (o master)
//primeiro voce cria um novo branch (ramo)
git branch <nome>

//depois voce escolhe em qual branch quer trabalhar, master ou no que voce criou usando o comando
git checkout <nome>
  //altere os arquivos e faça tudo que voce faria normalmente, de o git add, git commit ou até mesmo git push
  //quando quiser voltar a editar o ramo principal basta usar o 'git checkout master'
  //assim voce pode alternar entre varios ramos, sem que um influencie no outro

//quando voce acha que um ramo alternativo deva ser adicionado ao programa principal (master)
//mude novamente pro ramo principal (git checkout master) e entao use o comando
git merge <nomedobranchaseradicionado>

//esse comando vai unir todos os arquivos e alterações do ramo alternativo ao ramo principal
//ps* o ramo alternativo que voce criou nao deixou de existir, ele só esta apotando para o mesmo programa


// usar o git log gigante que coloquei la atras da uns efeitos legais quando voce tem um repositorio  ramificado
